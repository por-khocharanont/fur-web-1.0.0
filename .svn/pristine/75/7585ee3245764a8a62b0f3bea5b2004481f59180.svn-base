package th.co.ais.mimo.acim.web.filter;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.MDC;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.web.filter.OncePerRequestFilter;

import th.co.ais.mimo.acim.web.enums.URLService;
import th.co.ais.mimo.acim.web.model.UserMenu;
import th.co.ais.mimo.acim.web.security.WebAuthenticationProvider;
import th.co.ais.mimo.acim.web.util.Utils;

public class RestControllerFilter extends OncePerRequestFilter{
	
	private static final String UNKNOWN_USER_LOGIN = "unknownUserLogin";
	
	private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
			throws ServletException, IOException {
		
		Boolean hasMenu = true;
		HttpSession session = request.getSession();

		String uri = request.getRequestURI();
		URLService apiService = URLService.getPageByUri(uri);
		
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		
		if(apiService !=null){
			
			String page = apiService.getPage();
			UserMenu userMenu = (UserMenu) session.getAttribute(WebAuthenticationProvider.SESSION_USER_MENU);
			
			
			
			session.setAttribute("sessionPage", page);
			
			MDC.put("page", page);
			
			
			if(userMenu != null){
				hasMenu = userMenu.hasMenu(page);
				
				if( auth != null){
					
					MDC.put("userName", Utils.getuserInfo().getUsername());
				}else{
					MDC.put("userName", UNKNOWN_USER_LOGIN);
				}
			}
			
		}
		
		if(hasMenu){
			
			chain.doFilter(request, response);
			
		}else{
			
			
		    if (auth != null){    
		        new SecurityContextLogoutHandler().logout(request, response, auth);
		    }
			
			redirectStrategy.sendRedirect(request, response, "/login?logout");
		}
		
	}
	
}
